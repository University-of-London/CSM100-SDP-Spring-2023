import java.util.Arrays;

public class BlackjackHand implements Comparable {

    private PlayingCard faceDownCard;
    private PlayingCard[] faceUpCards;
    private int lastFaceUpCard;

    public BlackjackHand() {
        faceUpCards = new PlayingCard[10];
        int lastFaceUpCard = -1;
    }

    public void addFaceDown(PlayingCard card) {
        faceDownCard = card;
    }

    public void addFaceUp(PlayingCard card) {
        if (null == faceDownCard) {
            System.out.println("Can't add a face up card before adding a "+
                               "face down card.  Hand still empty.");
        } else {
            faceUpCards[lastFaceUpCard++] = card;
        }
    }

    public PlayingCard[] getFaceUpCards() {
        return Arrays.copyOf(faceUpCards, faceUpCards.length);
    }

    /**
     * Returns the value of a finished hand for purposes of
     * determining the winner of a game.  You'd want to look at the
     * cards in the hand to determine whether to hit or stand.
     */
    public int value() {
        if (null == faceDownCard) return 0;
        int value = cardValue(faceDownCard);
        for (int i = 0; i < lastFaceUpCard; ++i) {
            value += cardValue(faceUpCards[i]);
        }
        int acesRemaining = countAces();
        while ((value > 21) && (acesRemaining > 0)) {
            value -= 10;
            acesRemaining--;
        }
        return value;
    }

    private int cardValue(PlayingCard card) {
        if (card.getRank() == PlayingCard.Rank.JACK
            || card.getRank() == PlayingCard.Rank.QUEEN
            || card.getRank() == PlayingCard.Rank.KING) {
            return 10;
        } else if (card.getRank() == PlayingCard.Rank.ACE) {
            return 11;
        } else {
            // Cards start at 2, oridinals start at 0
            return card.getRank().ordinal() + 2;
        }
    }

    private int countAces() {
        int count = (faceDownCard.getRank() == PlayingCard.Rank.ACE) ? 1 : 0;
        for (int i = 0; i < lastFaceUpCard; ++i) {
            if (faceUpCards[i].getRank() == PlayingCard.Rank.ACE) count++;
        }
        return count;
    }

    public int compareTo(Object other) {
        // First, make sure we're comparing to another BlackjackHand
        if (!(other instanceof BlackjackHand)) {
            String msg = "Can't compare a BlackjacHand  object to a " +
                other.getClass().getName() + " object: " + other;
            throw new IllegalArgumentException(msg);
        }
        // Now this is guaranteed to work
        BlackjackHand that = (BlackjackHand) other;
        if (this.value() > 21 && that.value() > 21) {
            // Tie: both busted
            return 0;
        } else if (this.value() > 21 && that.value() <= 21) {
            // this hand busted
            return -1;
        } else if (this.value() <= 21 && that.value() > 21) {
            // other hand busted
            return 1;
        } else {
            // neither hand busted
            return this.value() - that.value();
        }
    }

    public String toString() {
        if (null == faceDownCard) {
            return "Empty hand.";
        } else if (faceUpCards.length < 1) {
            return "One face down card.";
        } else {
            String ret = "One face down card and: " +
                System.getProperty("line.separator");
            for (int i = 0; i < lastFaceUpCard; ++i) {
                ret += faceUpCards[i] + System.getProperty("line.separator");
            }
            return ret;
        }
    }

    public String show() {
        if (null == faceDownCard) {
            return "Empty hand.";
        } else {
            String ret = faceDownCard + System.getProperty("line.separator");
            for (int i = 0; i < lastFaceUpCard; ++i) {
                ret += faceUpCards[i] + System.getProperty("line.separator");
            }
            return ret;
        }
    }

    public static void main(String[] args) {
        BlackjackHand hand = new BlackjackHand();
        System.out.println("New hand:");
        System.out.println(hand.toString());
        PlayingCard ace = new PlayingCard(PlayingCard.Rank.ACE,
                                          PlayingCard.Suit.SPADES);
        PlayingCard jack = new PlayingCard(PlayingCard.Rank.JACK,
                                           PlayingCard.Suit.CLUBS);
        PlayingCard four = new PlayingCard(PlayingCard.Rank.FOUR,
                                           PlayingCard.Suit.HEARTS);
        hand.addFaceDown(ace);
        System.out.println("After one face down card:");
        System.out.println(hand.toString());
        System.out.println("After one face up card:");
        hand.addFaceUp(jack);
        System.out.println(hand.toString());
        System.out.println("After two face up card:");
        hand.addFaceUp(four);
        System.out.println(hand.toString());
        System.out.println("Value should be 15:");
        System.out.println(hand.value());
    }
}
